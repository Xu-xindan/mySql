create table emp(    
id int primary key auto_increment,    
name varchar(20) not null,    
role varchar(20) not null,    
salary numeric(11,2) );
insert into emp(name, role, salary) values 
('马云','服务员', 1000.20), 
('马化腾','游戏陪玩', 2000.99), 
('孙悟空','游戏角色', 999.11), 
('猪无能','游戏角色', 333.5), 
('沙和尚','游戏角色', 700.33), 
('隔壁老王','董事长', 12000.66);

--分组查询
select role,max(salary),min(salary),avg(salary) from emp group by role;

select role,max(salary),min(salary),avg(salary) from emp group by role having avg(salary)<1500; 

drop table if exits aaa;
create table aaa(
a1 varchar(20),
a2 varchar(20)
);

drop table if exits bbb;
create table bbb(
b1 varchar(20),
b2 varchar(20)
);

insert into aaa values('a','aa');
insert into aaa values('b','bb');
insert into bbb values('1','11');
insert into bbb values('1','11');

--关联查询
select * from aaa,bbb;

--现象
aaa
+------+------+
| a1   | a2   |
+------+------+
| a    | aa   |
| b    | bb   |
+------+------+

bbb
+------+------+
| b1   | b2   |
+------+------+
| 1    | 11   |
| 2    | 22   |
+------+------+

select aaa.*,bbb.* from aaa,bbb;
+------+------+------+------+
| a1   | a2   | b1   | b2   |
+------+------+------+------+
| a    | aa   | 1    | 11   |
| b    | bb   | 1    | 11   |
| a    | aa   | 2    | 22   |
| b    | bb   | 2    | 22   |
+------+------+------+------+

-- 创建班级表，有使用MySQL关键字作为字段时，需要使用``来标识
DROP TABLE IF EXISTS classes;
CREATE TABLE classes (
	id INT PRIMARY KEY auto_increment,
	name VARCHAR(20),
	`desc` VARCHAR(100)
);

-- 重新设置学生表结构
DROP TABLE IF EXISTS student;
CREATE TABLE student (
    id INT PRIMARY KEY auto_increment,
    sn INT UNIQUE,
    name VARCHAR(20) DEFAULT 'unkown',
    qq_mail VARCHAR(20),
	classes_id int,
	FOREIGN KEY (classes_id) REFERENCES classes(id)
);

-- 创建课程表
DROP TABLE IF EXISTS course;
CREATE TABLE course (
    id INT PRIMARY KEY auto_increment,
    name VARCHAR(20)
);

-- 创建课程学生中间表：考试成绩表
DROP TABLE IF EXISTS score;
CREATE TABLE score (
    id INT PRIMARY KEY auto_increment,
	score DECIMAL(3, 1),
    student_id int,
	course_id int,
	FOREIGN KEY (student_id) REFERENCES student(id),
	FOREIGN KEY (course_id) REFERENCES course(id)
);

insert into classes(name, `desc`) values 
('计算机系2019级1班', '学习了计算机原理、C和Java语言、数据结构和算法'),
('中文系2019级3班','学习了中国传统文学'),
('自动化2019级5班','学习了机械自动化');

insert into student(sn, name, qq_mail, classes_id) values
('09982','黑旋风李逵','xuanfeng@qq.com',1),
('00835','菩提老祖',null,1),
('00391','白素贞',null,1),
('00031','许仙','xuxian@qq.com',1),
('00054','不想毕业',null,1),
('51234','好好说话','say@qq.com',2),
('83223','tellme',null,2),
('09527','老外学中文','foreigner@qq.com',2);

insert into course(name) values
('Java'),('中国传统文化'),('计算机原理'),('语文'),('高阶数学'),('英文');

insert into score(score, student_id, course_id) values
-- 黑旋风李逵
(70.5, 1, 1),(98.5, 1, 3),(33, 1, 5),(98, 1, 6),
-- 菩提老祖
(60, 2, 1),(59.5, 2, 5),
-- 白素贞
(33, 3, 1),(68, 3, 3),(99, 3, 5),
-- 许仙
(67, 4, 1),(23, 4, 3),(56, 4, 5),(72, 4, 6),
-- 不想毕业
(81, 5, 1),(37, 5, 5),
-- 好好说话
(56, 6, 2),(43, 6, 4),(79, 6, 6),
-- tellme
(80, 7, 2),(92, 7, 6);

--查询许仙的成绩
select * from student join score on student.id=score.student_id and student.name='许仙'；

select student.id,student.sn,student.name,score.score,classes.name 
from student join score on student.classes_id=classes.id and student.name='许仙';

select stu.id,stu.sn,stu.name,sco.score,cls.name from student stu,score sco,classes cls 
where stu.id=sco.student_id and stu.classes_id=cls.id and stu.name='许仙';

--查询所有有成绩同学的信息
select * from student join score on student.id=score.student_id;

--查询所有同学的总成绩及个人信息
select stu.sn,stu.name,stu. qq_mail,sum(sco.score) from student stu 
join score sco on stu.id=sco.student_id group by sco.student_id;
--内连接 
select stu.id,stu.sn,stu.name,stu.qq_mail,sco.score,sco.course_id,cou.name
from student stu join score sco on stu.id=sco.student_id 
join course cou on sco.course_id=cou.id order by stu.id;
--外连接 如果没有考试也要显示 左/右连接  左边/右边的表即使右另一边没有信息也显示
select stu.id,stu.sn,stu.name,stu.qq_mail,sco.score,sco.course_id,cou.name
from student stu left join score sco on stu.id=sco.student_id 
left join course cou on sco.course_id=cou.id order by stu.id;

--自连接一般是使用在同一张表多行操作
select cou.name,sco.score,sco.student_id
from score sco 
join course cou on cou.id=sco.course_id
join score sco2 on sco.student_id=sco2.student_id
join course cou2 on sco2.course_id=cou2.id
and cou.name='英文' and cou2.name='中文' and sco.score>sco2.score;